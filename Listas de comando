LISTA DE COMANDOS:

#!/usr/bin/perl -w –> interpretador/compilador para sistemas UNIX, também conhecido como “shebang” informando como o Sistema operacional deveria processar um determinado script.

print –> Exibir alguma mensagem ou dado na tela.

chomp –> remove o caractere especial “\n” .

use –> permite o carregamento de módulos do perl, como o “use strict” interrompe um erro do código e o “use warning” informa erros dos scripts, mas mantém a execução. Ambos podem ser usados juntos.

<STDIN> -> Operador diamante para indicar onde o script deve receber algum dado.

system -> serve para aplicar funções nativas do sistema operacional, como por exemplo funções do terminal.


OPERADORES RELACIONAIS:

= -> Operador de atribuição. Válido para dados de quaisquer tipos.

== -> Verifica se uma variável numérica é igual a outra. 

> ou < -> Verifica se uma variável numérica é maior ou menor que outra. 

>= ou <= -> Verifica se uma variável numérica é maior ou igual a outra.

!= -> Verifica se uma variável numérica é diferente de outra. 

<=> -> Realiza comparação numérica. 

cmp -> Permite comparações entre strings. Retorna -1 quando a string for menor, 0 para strings iguais e 1 quando a string for maior. Uma string é maior ou menor em relação a posição de ordem alfabética da lista ASCII.

eq -> Verifica se uma string é igual a outra. Significa “equals”.

ne -> Verifica se uma string é diferente de outra. Significa “not equal”.

lt -> Verifica se a ordenação de uma string é inferior a outra. Significa “less than”.

gt -> Verifica se a ordenação de uma string é superior a outra. Significa “greater than”

le -> Verifica se a ordenação de uma string é inferior ou igual a outra. Significa “greater or equal”.

ge -> Verifica se a ordenação de uma string é superior ou igual a outra. Significa “less or equal"

. -> Operador de concatenação de strings.


OPERADORES LÓGICOS:

and ou && -> Significa “e” para validar duas condições verdadeiras.

or ou || -> Significa “ou” para validar pelo menos uma das condições.

! -> Significa “não” para validar se uma condição for falsa.


OPERADORES CONDICIONAIS:

if -> Significa “se”, permite que blocos de condicionais sejam testados.

else -> Significa “outro”, permite que se nenhum bloco de condicional foi comprovado, else será o bloco executado.

elsif -> Significa “else+if”, permite que uma nova condição seja testada caso a anterior não for comprovada.


FUNÇÃO PARA STRINGS:

lc -> abreviação do inglês "lower case", significa letras minúsculas. Exemplo "print lc $string".

uc -> abreviação do inglês "upper case", significa letras maiúsculas. Exemplo "print uc $sting".

length –> retornar a quantidade de caracteres de uma string, incluindo os espaços.

index -> retonar um número inteiro relacionado a posição de uma string. Lembrando que a contagem começa do zero.

substr -> realiza cortes na string de acordo com o selecionado "substr(nome da variável ou string entre aspas, posição de início do corte, tamanho do corte, string entre aspas para substituição). Lembrando que nem todas essas funções são obrigatorias para uso.

replicação -> ("string")x4 irá repetir a string de acordo com a quatidade de vezes desejada, nesse exemplo irá repetir 4 vezes.


LAÇOS DE REPETIÇÃO:

while -> significa "enquanto", irá realizar uma determinada condição enquanto ela for válida. No laço while a condição é mais importante do que a execução do código.

do...while -> significa "faça...enquanto", semelhante a while, porém a execução do código é mais importante do que a condição, ou seja, irá executar pelo menos uma vez mesmo que a condição seja falsa.

for -> significa "para", permite que uma variável seja testada e podendo incrementar a cada interação.

foreach -> semelhante a função anterior, porém utilizada para arrays e hases.

last -> significa "último" e serve para encerrar um laço de repetição de acordo com alguma condição.

next -> significa "próximo" e serve para processiguir para a próxima interação de acordo com alguma condição.


INPUT/OUTPUT

open(arquivo, modo de abertura, nome do arquivo) -> Abrir arquivo desejado, caso não esteja na mesma pasta, indicar o diretório.

close(arquivo) -> fecha o arquivo aberto no script.

< -> modo de abertura para leitura. Não cria arquivo nem sobrepõe outro.

> -> modo de abertura para escrita. Cria arquivo novor e sobrepõe outro com o mesmo nome..

>> -< modo de abertura para incrementar. cria um novo arquivo, caso tenha o mesmo nome que outro arquivo, irá adicioanr as informaçõe novas.

+< -> modo de abertura para leitura/escrita. Não cria novo arquivo nem sobrepõe outro.

+> -> modo de abertura para leitura/escrita. Cria novo arquivo e sobrepõe outro com o mesmo nome.

+>> -> modo de abertura para leitura/escrita incremental. cria novo arquivo e adiciona a outro com o mesmo nome.

die -> função opcional para indicar erro de abertura de arquivo.


ARRAYS

@array = () -> são estrutuas que podem armazedas diversos elementos, sendo eles strings, inteiros, floats e até outros arrays. Elementos devem ser separados por vírgula.

$array[index] -> função para acessar um elemento dentro de uma array de acordo com a posição indicada.

pop() -> remove o último elemtendo da array e retorna ele.

push() -> insere um elemento em uma array para o final da da estrutura.
x
shift() -> remove o primeiro elemento da array e retonar ele.

unshift() -> adiciona um elemento ao início da array.

$variavel = @array -> cria uma váriavel com o número de elementos da array.

$variavel = "@array" -> cria uma váriavel com os elementos agrupados da array.

sort(@array) -> organiza a array em ordem númerica ou alfabetica.

reverse -> retonar a array invertida.

(my $primeiro, my $segundo) = @array -> cria duas váriaveis cada uma com o primeiro e o segundo elemento da array.

(my $primeiro, my @outros) = @array -> cria uma váriavel com o primeiro e uma array com os outros elementos.


HASHES

%hashe = () -> são arrays associativos ou dicionários, contém divesos elementos chamados de valores que são relacionados as repectivas chaves.

$hashe{key} = valor -> insere um valor e sua chave dentro de uma hashe como o mesmo nome.

delete $hashe{key} -> "remove" um valor de uma hashe.

$tamanho = keys %hashe -> cria uma váriavel com o número de chaves de uma hashe.

scalar keys %hashe -> retonar o número de chaves de uma hashe.

scalar values %hashe -> retonar o número de valores de uma hashe.

each -> retonar um array com o par de elemntos.

map -> avalia cada elemento de uma lista



